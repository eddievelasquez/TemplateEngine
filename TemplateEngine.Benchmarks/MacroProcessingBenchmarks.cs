// Module Name: MacroProcessingBenchmarks.cs
// Author:      Eduardo Velasquez
// Copyright (c) 2025, Intercode Consulting, Inc.

#pragma warning disable CS0618 // Type or member is obsolete

namespace Intercode.Toolbox.TemplateEngine.Benchmarks;

using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Columns;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Reports;

[Config( typeof( Config ) )]
[MemoryDiagnoser]
[HideColumns( "Job", "Median" )]
public partial class MacroProcessingBenchmarks
{
  #region Constants

  public const string TemplateText = """
    // <auto-generated> This file has been auto generated by Intercode Toolbox Typed Primitives. </auto-generated>
    #nullable enable

    namespace $Namespace$;

    public partial class $TypeName$SystemTextJsonConverter: global::System.Text.Json.Serialization.JsonConverter<$TypeQualifiedName$>
    {
      public override bool CanConvert(
        global::System.Type typeToConvert )
      {
        return typeToConvert == typeof( $TypeQualifiedName$ );
      }

      public override $TypeQualifiedName$ Read(
        ref global::System.Text.Json.Utf8JsonReader reader,
        global::System.Type typeToConvert,
        global::System.Text.Json.JsonSerializerOptions options )
      {
        $TypeKeyword$? value = null;
        if( reader.TokenType != global::System.Text.Json.JsonTokenType.Null )
        {
          if( reader.TokenType == global::System.Text.Json.JsonTokenType.$JsonTokenType$ )
          {
            value = $JsonReader$;
          }
          else
          {
            bool converted = false;
            ConvertToPartial( ref reader, typeToConvert, options, ref value, ref converted );

            if ( !converted )
            {
              throw new global::System.Text.Json.JsonException( "Value must be a $JsonTokenType$" );
            }
          }
        }

        var result = $TypeQualifiedName$.Create( value );
        if( result.IsFailed )
        {
          throw new global::System.Text.Json.JsonException(
            global::System.Linq.Enumerable.First( result.Errors )
                  .Message
          );
        }

        return result.Value;
      }

      public override void Write(
        global::System.Text.Json.Utf8JsonWriter writer,
        $TypeQualifiedName$ value,
        global::System.Text.Json.JsonSerializerOptions options )
      {
        if ( value.IsDefault )
        {
          writer.WriteNullValue();
          return;
        }

        $JsonWriter$;
      }

      partial void ConvertToPartial(
        ref global::System.Text.Json.Utf8JsonReader reader,
        global::System.Type typeToConvert,
        global::System.Text.Json.JsonSerializerOptions options,
        ref $TypeKeyword$? value,
        ref bool converted );
    }
    """;

  // String.Format-compatible copy of TemplateText.
  public const string TemplateTextFormat = """
    // <auto-generated> This file has been auto generated by Intercode Toolbox Typed Primitives. </auto-generated>
    #nullable enable

    namespace {0};

    public partial class {1}SystemTextJsonConverter: global::System.Text.Json.Serialization.JsonConverter<{2}>
    {{
      public override bool CanConvert(
        global::System.Type typeToConvert )
      {{
        return typeToConvert == typeof( {2} );
      }}

      public override {2} Read(
        ref global::System.Text.Json.Utf8JsonReader reader,
        global::System.Type typeToConvert,
        global::System.Text.Json.JsonSerializerOptions options )
      {{
        {3}? value = null;
        if( reader.TokenType != global::System.Text.Json.JsonTokenType.Null )
        {{

          if( reader.TokenType == global::System.Text.Json.JsonTokenType.{4} )
          {{
            value = {5};
          }}
          else
          {{
            bool converted = false;
            ConvertToPartial( ref reader, typeToConvert, options, ref value, ref converted );

            if ( !converted )
            {{
              throw new global::System.Text.Json.JsonException( "Value must be a {4}" );
            }}
          }}
        }}

        var result = {2}.Create( value );
        if( result.IsFailed )
        {{
          throw new global::System.Text.Json.JsonException(
            global::System.Linq.Enumerable.First( result.Errors )
                  .Message
          );
        }}

        return result.Value;
      }}

      public override void Write(
        global::System.Text.Json.Utf8JsonWriter writer,
        {2} value,
        global::System.Text.Json.JsonSerializerOptions options )
      {{
        if ( value.IsDefault )
        {{
          writer.WriteNullValue();
          return;
        }}

        {6};
      }}

      partial void ConvertToPartial(
        ref global::System.Text.Json.Utf8JsonReader reader,
        global::System.Type typeToConvert,
        global::System.Text.Json.JsonSerializerOptions options,
        ref {3}? value,
        ref bool converted );
    }}
    """;

  #endregion

  #region Fields

  private readonly Template _template;
  private readonly MacroValues _dynamicMacroValues;
  private readonly CompositeFormat _compositeFormat;

  #endregion

  #region Constructors

  public MacroProcessingBenchmarks()
  {
    // Declare macro table
    var builder = new MacroTableBuilder();

    foreach( var (macroName, _) in Macros )
    {
      builder.Declare( macroName );
    }

    var macroTable = builder.Build();

    // Set macro values
    _dynamicMacroValues = macroTable.CreateValues();

    foreach( var (macroName, value) in Macros )
    {
      _dynamicMacroValues.SetValue( macroName, value );
    }

    // Compile templates
    _template = TemplateCompiler.Compile( TemplateText, macroTable );
    _compositeFormat = CompositeFormat.Parse( TemplateTextFormat );
  }

  #endregion

  #region Properties

  public static IReadOnlyDictionary<string, string> Macros =>
    new Dictionary<string, string>
    {
      { "Namespace", "Benchmark.Tests" },
      { "TypeName", "TestType" },
      { "TypeQualifiedName", "Benchmark.Tests.TestType" },
      { "TypeKeyword", "string" },
      { "JsonTokenType", "String" },
      { "JsonReader", "reader.GetString()" },
      { "JsonWriter", "writer.WriteStringValue( value.Value )" }
    };

  #endregion

  #region Public Methods

  [Benchmark]
  public string MacroProcessor_WithStringParams()
  {
    return _template.ProcessMacros(
      "MyApp.Primitives",
      "Type",
      "MyApp.Primitives.Type",
      "string",
      "String",
      "reader.GetString()",
      "writer.WriteStringValue( value.Value )"
    );
  }

  [Benchmark]
  public string MacroProcessor_WithMacrosValues()
  {
    return _template.ProcessMacros( _dynamicMacroValues );
  }

  [Benchmark]
  public string StringFormat()
  {
    return string.Format(
      TemplateTextFormat,
      "MyApp.Primitives",
      "Type",
      "MyApp.Primitives.Type",
      "string",
      "String",
      "reader.GetString()",
      "writer.WriteStringValue( value.Value )"
    );
  }

  [Benchmark]
  public string StringFormat_WithCompositeFormat()
  {
    return string.Format(
      CultureInfo.InvariantCulture,
      _compositeFormat,
      "MyApp.Primitives",
      "Type",
      "MyApp.Primitives.Type",
      "string",
      "String",
      "reader.GetString()",
      "writer.WriteStringValue( value.Value )"
    );
  }

  [Benchmark]
  public string StringBuilderReplace()
  {
    var sb = new StringBuilder( TemplateText );

    foreach( var (macro, value) in Macros )
    {
      sb.Replace( macro, value );
    }

    return sb.ToString();
  }

  [Benchmark]
  public string RegularExpression()
  {
    return CreateMacroNameRegex()
      .Replace(
        TemplateText,
        match =>
        {
          var key = match.Groups[1].Value;
          return Macros.TryGetValue( key, out var value ) ? value : match.Value;
        }
      );
  }

  [Benchmark( Baseline = true )]
  public string StringReplace()
  {
    var result = TemplateText;

    foreach( var (macroName, value) in Macros )
    {
      result = result.Replace( $"${macroName}$", value, StringComparison.OrdinalIgnoreCase );
    }

    return result;
  }

  #endregion

  #region Implementation

  private class Config: ManualConfig
  {
    public Config()
    {
      SummaryStyle = SummaryStyle.Default.WithRatioStyle( RatioStyle.Trend );
    }
  }

  [GeneratedRegex( @"\$([^$]+)\$" )]
  private static partial Regex CreateMacroNameRegex();

  #endregion
}
